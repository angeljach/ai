package com.bmv.auditoria.ai.persistent.auto;

import java.util.List;

import org.apache.cayenne.CayenneDataObject;

import com.bmv.auditoria.ai.persistent.AuditCloseReport;
import com.bmv.auditoria.ai.persistent.AuditInitialReport;
import com.bmv.auditoria.ai.persistent.CompanyDepartments;
import com.bmv.auditoria.ai.persistent.MovementsUser;
import com.bmv.auditoria.ai.persistent.ObsUsers;
import com.bmv.auditoria.ai.persistent.Observations;
import com.bmv.auditoria.ai.persistent.RequirementsInformation;
import com.bmv.auditoria.ai.persistent.UserRoles;

/**
 * Class _Users was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Users extends CayenneDataObject {

    public static final String IS_LOCAL_PROPERTY = "isLocal";
    public static final String PASSWORD_PROPERTY = "password";
    public static final String USER_NAME_PROPERTY = "userName";
    public static final String AUDIT_CLOSE_REPORT_ARRAY_PROPERTY = "auditCloseReportArray";
    public static final String AUDIT_INITIAL_REPORT_ARRAY_PROPERTY = "auditInitialReportArray";
    public static final String COMPANY_DEPARTMENTS_ARRAY_PROPERTY = "companyDepartmentsArray";
    public static final String MOVEMENTS_USER_ARRAY_PROPERTY = "movementsUserArray";
    public static final String OBS_USERS_ARRAY_PROPERTY = "obsUsersArray";
    public static final String OBSERVATIONS_ARRAY_PROPERTY = "observationsArray";
    public static final String REQUIREMENTS_INFORMATION_ARRAY_PROPERTY = "requirementsInformationArray";
    public static final String TO_USER_ROLES_PROPERTY = "toUserRoles";

    public static final String ID_USER_PK_COLUMN = "ID_USER";

    public void setIsLocal(Boolean isLocal) {
        writeProperty("isLocal", isLocal);
    }
    public Boolean getIsLocal() {
        return (Boolean)readProperty("isLocal");
    }

    public void setPassword(String password) {
        writeProperty("password", password);
    }
    public String getPassword() {
        return (String)readProperty("password");
    }

    public void setUserName(String userName) {
        writeProperty("userName", userName);
    }
    public String getUserName() {
        return (String)readProperty("userName");
    }

    public void addToAuditCloseReportArray(AuditCloseReport obj) {
        addToManyTarget("auditCloseReportArray", obj, true);
    }
    public void removeFromAuditCloseReportArray(AuditCloseReport obj) {
        removeToManyTarget("auditCloseReportArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<AuditCloseReport> getAuditCloseReportArray() {
        return (List<AuditCloseReport>)readProperty("auditCloseReportArray");
    }


    public void addToAuditInitialReportArray(AuditInitialReport obj) {
        addToManyTarget("auditInitialReportArray", obj, true);
    }
    public void removeFromAuditInitialReportArray(AuditInitialReport obj) {
        removeToManyTarget("auditInitialReportArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<AuditInitialReport> getAuditInitialReportArray() {
        return (List<AuditInitialReport>)readProperty("auditInitialReportArray");
    }


    public void addToCompanyDepartmentsArray(CompanyDepartments obj) {
        addToManyTarget("companyDepartmentsArray", obj, true);
    }
    public void removeFromCompanyDepartmentsArray(CompanyDepartments obj) {
        removeToManyTarget("companyDepartmentsArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<CompanyDepartments> getCompanyDepartmentsArray() {
        return (List<CompanyDepartments>)readProperty("companyDepartmentsArray");
    }


    public void addToMovementsUserArray(MovementsUser obj) {
        addToManyTarget("movementsUserArray", obj, true);
    }
    public void removeFromMovementsUserArray(MovementsUser obj) {
        removeToManyTarget("movementsUserArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<MovementsUser> getMovementsUserArray() {
        return (List<MovementsUser>)readProperty("movementsUserArray");
    }


    public void addToObsUsersArray(ObsUsers obj) {
        addToManyTarget("obsUsersArray", obj, true);
    }
    public void removeFromObsUsersArray(ObsUsers obj) {
        removeToManyTarget("obsUsersArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<ObsUsers> getObsUsersArray() {
        return (List<ObsUsers>)readProperty("obsUsersArray");
    }


    public void addToObservationsArray(Observations obj) {
        addToManyTarget("observationsArray", obj, true);
    }
    public void removeFromObservationsArray(Observations obj) {
        removeToManyTarget("observationsArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<Observations> getObservationsArray() {
        return (List<Observations>)readProperty("observationsArray");
    }


    public void addToRequirementsInformationArray(RequirementsInformation obj) {
        addToManyTarget("requirementsInformationArray", obj, true);
    }
    public void removeFromRequirementsInformationArray(RequirementsInformation obj) {
        removeToManyTarget("requirementsInformationArray", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<RequirementsInformation> getRequirementsInformationArray() {
        return (List<RequirementsInformation>)readProperty("requirementsInformationArray");
    }


    public void setToUserRoles(UserRoles toUserRoles) {
        setToOneTarget("toUserRoles", toUserRoles, true);
    }

    public UserRoles getToUserRoles() {
        return (UserRoles)readProperty("toUserRoles");
    }


}
